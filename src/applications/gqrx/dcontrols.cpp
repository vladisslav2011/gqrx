/* -*- c++ -*- */
/*
 * Gqrx SDR: Software defined radio receiver powered by GNU Radio and Qt
 *           https://gqrx.dk/
 *
 * Copyright 2023 vladisslav2011@gmail.com.
 *
 * Gqrx is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * Gqrx is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gqrx; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#include <QDir>
#include "dcontrols.h"
#include "dsp/format_converter.h"

struct mode_map_helper
{
    c_def::v_preset presets[Modulations::MODE_COUNT]{};
    constexpr mode_map_helper & init()
    {
        for(int k=0;k<Modulations::MODE_COUNT;k++)
            presets[k]=c_def::v_preset(
                Modulations::modes[k].name,
                Modulations::modes[k].name,
                k,
                Modulations::modes[k].shortcut
            );
        return *this;
    }
};

constexpr mode_map_helper mode_map = mode_map_helper().init();

struct file_format_helper
{
    c_def::v_preset presets[FILE_FORMAT_COUNT-FILE_FORMAT_CF]{};
    constexpr file_format_helper & init()
    {
        for(int k=FILE_FORMAT_CF;k<FILE_FORMAT_COUNT;k++)
            presets[k-FILE_FORMAT_CF]=c_def::v_preset(
                any_to_any_base::fmt[k].suffix,
                any_to_any_base::fmt[k].name,
                k,
                ""
            );
        return *this;
    }
};

constexpr file_format_helper file_format_map = file_format_helper().init();

static constexpr std::array<c_def,C_COUNT> store{

c_def()
    .idx(C_TEST)
    .name("test")
    .title("test ctl")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NONE,PLACE_NEXT))
    .hint("widget test value")
//    .g_type(G_TOGGLEBUTTON)
//    .g_type(G_SLIDER)
//    .g_type(G_SPINBOX)
//    .g_type(G_DOUBLESPINBOX)
    .g_type(G_NONE)
    .dock(D_RDS)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .v4_config_group("test")
    .config_key("test")
//    .tab("Tab0")
    .bookmarks_column(-1)
    .v_type(V_INT)
    .def(0)
    .min(0)
    .max(1000)
    .step(10)
    .frac_digits(1)
    .readable(true)
    .writable(true)
    .event(false)
    ,
    

c_def()
    .idx(C_IQ_LOCATION)
    .name("IQ Location")
    .title("Location:")
    .title_placement(c_def::grid_placement(0,0,1,1,ALIGN_LEFT))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,5,SIZE_EXPANDING))
    .hint("Enter a different location or use the select button")
    .g_type(G_TEXT)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v3_config_group("baseband")
    .config_key("rec_dir")
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    ,
c_def()
    .idx(C_IQ_SELECT)
    .name("Select")
    .title("Location select")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_RIGHT|SIZE_PREFERRED))
    .hint("Select a different location")
    .g_type(G_BUTTON)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .readable(0)
    ,
//leave a row for the file list
c_def()
    .idx(C_IQ_REC)
    .name("&Rec")
    .title("IQ Rec")
    .icon(":/icons/icons/record.svg")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(2,0,1,1,ALIGN_LEFT))
    .hint("Record I/Q samples to new file")
    .g_type(G_TOGGLEBUTTON)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .readable(0)
    ,
c_def()
    .idx(C_IQ_PLAY)
    .name("&Play")
    .title("IQ Play")
    .icon(":/icons/icons/play.svg")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_LEFT))
    .hint("Start playing selected file")
    .g_type(G_TOGGLEBUTTON)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .readable(0)
    ,
c_def()
    .idx(C_IQ_REPEAT)
    .name("repeat")
    .title("IQ repeat")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_LEFT|SIZE_PREFERRED))
    .hint("Repeat playing file")
    .v3_config_group("baseband")
    .config_key("repeat")
    .g_type(G_CHECKBOX)
    .dock(D_IQTOOL)
    .scope(S_RX)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_IQ_TIME)
    .name("IQ time label")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,4,SIZE_EXPANDING|ALIGN_CENTER))
    .hint("Time (total/remaining)")
    .g_type(G_LABEL)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(0)
//    .event(1)
    ,
c_def()
    .idx(C_IQ_POS)
    .name("IQ seek")
    .title("IQ seek")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,1,7))
    .hint("Seek forward and backward in I/Q file")
    .g_type(G_SLIDER)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_INT)
    .def(0)
    .min(0)
    .max(600)
    .step(10)
    ,
c_def()
    .idx(C_IQ_FORMAT)
    .name("IQ format")
    .title("Format:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0,1,1,ALIGN_LEFT))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,4))
    .hint("Set recording sample format")
    .v3_config_group("baseband")
    .config_key("rec_fmt")
    .g_type(G_COMBO)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_INT)
    .def(FILE_FORMAT_CF)
    .min(FILE_FORMAT_CF)
    .max(FILE_FORMAT_COUNT)
    .step(1)
    .presets(file_format_map.presets)
    ,
c_def()
    .idx(C_IQ_BUFFERS)
    .name("IQ buffers")
    .title("Buffer:")
    .title_placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_RIGHT))
    .hint("Set recording buffer size")
    .v3_config_group("baseband")
    .config_key("rec_buffers")
    .g_type(G_SPINBOX)
    .dock(D_IQTOOL)
    .scope(S_RX)
    .v_type(V_INT)
    .suffix("s")
    .def(1)
    .min(1)
    .max(99)
    .step(1)
    ,
c_def()
    .idx(C_IQ_SIZE_STAT)
    .name("IQ size")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,1,5))
    .hint("Recording size/playback pos")
    .g_type(G_LABEL)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(0)
    ,
c_def()
    .idx(C_IQ_BUF_STAT)
    .name("IQ buffer")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("IQ Tool buffer fill")
    .g_type(G_LABEL)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_INT)
    .prefix("Buffer: ")
    .suffix("%")
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .writable(0)
    ,
c_def()
    .idx(C_IQ_FINE_STEP)
    .base(C_IQ_POS)
    .name("Fine step")
    .title("Enable small step")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,0))
    .hint("Enable small step")
    .shortcut(";")
    .g_type(G_MENUCHECKBOX)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_IQ_SEL_A)
    .base(C_IQ_POS)
    .name("A")
    .title("Set marker A (start)")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,0))
    .hint("Set marker A (start)")
    .shortcut("[")
    .g_type(G_MENUACTION)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .readable(0)
    ,
c_def()
    .idx(C_IQ_SEL_B)
    .base(C_IQ_POS)
    .name("B")
    .title("Set marker B (end)")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,0))
    .hint("Set marker A (start)")
    .shortcut("]")
    .g_type(G_MENUACTION)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .readable(0)
    ,
c_def()
    .idx(C_IQ_RESET_SEL)
    .base(C_IQ_POS)
    .name("Reset")
    .title("Reset selection")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,0))
    .hint("Reset selection")
    .g_type(G_MENUACTION)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .readable(0)
    ,
c_def()
    .idx(C_IQ_SAVE_SEL)
    .base(C_IQ_POS)
    .name("Save")
    .title("Save selection")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,0))
    .hint("Save selection")
    .shortcut("S")
    .g_type(G_MENUACTION)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .readable(0)
    ,
c_def()
    .idx(C_IQ_GOTO_A)
    .base(C_IQ_POS)
    .name("Go to A")
    .title("Seek to marker A (start)")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,0))
    .hint("Seek to marker A (start)")
    .shortcut("{")
    .g_type(G_MENUACTION)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .readable(0)
    ,
c_def()
    .idx(C_IQ_GOTO_B)
    .base(C_IQ_POS)
    .name("Go to B")
    .title("Seek to marker B (start)")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,0))
    .hint("Seek to marker B (start)")
    .shortcut("}")
    .g_type(G_MENUACTION)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .readable(0)
    ,
c_def()
    .idx(C_IQ_SAVE_LOC)
    .base(C_IQ_POS)
    .name("Save to")
    .title("Set save location")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,0))
    .hint("Set save location")
    .g_type(G_MENUACTION)
    .dock(D_IQTOOL)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .readable(0)
    ,



c_def()
    .idx(C_DXC_ADDRESS)
    .name("DXC address")
    .title("Address:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("DX Cluster address. IP or hostname.")
    .g_type(G_TEXT)
    .dock(D_DXC)
    .scope(S_GUI)
    .v3_config_group("dxcluster")
    .config_key("DXCAddress")
    .v_type(V_STRING)
    .def("127.0.0.1")
    .min("")
    .max("")
    .step("")
    ,
c_def()
    .idx(C_DXC_PORT)
    .name("DXC port")
    .title("Port:")
    .title_placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("DX Cluster TCP port.")
    .g_type(G_SPINBOX)
    .dock(D_DXC)
    .scope(S_GUI)
    .v3_config_group("dxcluster")
    .config_key("DXCPort")
    .v_type(V_INT)
    .def(7300)
    .min(1)
    .max(65535)
    .step(1)
    ,
c_def()
    .idx(C_DXC_TIMEOUT)
    .name("DXC spot timeout")
    .title("Spot Timeout/min:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0,1,2))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1))
    .hint("DX Cluster spot timeout.")
    .g_type(G_SPINBOX)
    .dock(D_DXC)
    .scope(S_GUI)
    .v3_config_group("dxcluster")
    .config_key("DXCSpotTimeout")
    .v_type(V_INT)
    .def(10)
    .min(1)
    .max(100)
    .step(1)
    ,
c_def()
    .idx(C_DXC_FILTER)
    .name("DXC filter")
    .title("Filter:")
    .title_placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Callsign filter.")
    .g_type(G_TEXT)
    .dock(D_DXC)
    .scope(S_GUI)
    .v3_config_group("dxcluster")
    .config_key("DXCFilter")
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    ,
c_def()
    .idx(C_DXC_USERNAME)
    .name("DXC usernam")
    .title("Username:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0,1,2))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1))
    .hint("DX Cluster user name/callsign.")
    .g_type(G_TEXT)
    .dock(D_DXC)
    .scope(S_GUI)
    .v3_config_group("dxcluster")
    .config_key("DXCUsername")
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    ,
c_def()
    .idx(C_DXC_DISCONNECT)
    .name("Disconnect")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,2,1,1))
    .hint("Disconnect from DX Cluster")
    .g_type(G_BUTTON)
    .dock(D_DXC)
    .scope(S_GUI)
    .v_type(V_INT)
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .readable(0)
    ,
c_def()
    .idx(C_DXC_CONNECT)
    .name("Connect")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,4,1,1))
    .hint("Connect to DX Cluster")
    .g_type(G_BUTTON)
    .dock(D_DXC)
    .scope(S_GUI)
    .v_type(V_INT)
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .readable(0)
    ,


c_def()
    .idx(C_FFT_SIZE)
    .name("FFT size")
    .title("FFT Size")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,5))
    .hint("<html>Number of FFT points to calculate. Higher values will require more CPU time. This will not influence the number of points on the display since that parameter is adjusted automatically according to the display size.</html>")
    .g_type(G_COMBO)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("fft_size")
    .v_type(V_INT)
    .def(8192)
    .min(512)
    .max(4194304)
    .step(1)
    .presets((c_def::v_preset[]){
        {"4194304","4194304",4194304},
        {"2097152","2097152",2097152},
        {"1048576","1048576",1048576},
        {"524288", "524288", 524288},
        {"262144", "262144", 262144},
        {"131072", "131072", 131072},
        {"65536",  "65536",  65536},
        {"32768",  "32768",  32768},
        {"16384",  "16384",  16384},
        {"8192",   "8192",   8192},
        {"4096",   "4096",   4096},
        {"3840",   "3840",   3840},
        {"2048",   "2048",   2048},
        {"1024",   "1024",   1024},
        {"768",    "768",    768},
        {"512",    "512",    512},
    })
    ,
c_def()
    .idx(C_FFT_RBW_LABEL)
    .name("rbw label")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_LEFT))
    .hint("FFT bin width")
    .g_type(G_LABEL)
    .dock(D_FFT)
    .scope(S_GUI)
    .v_type(V_STRING)
    .def("")
    .writable(0)
    ,
c_def()
    .idx(C_FFT_RATE)
    .name("FFT rate")
    .title("Rate")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,5))
    .hint("FFT refresh rate")
    .g_type(G_COMBO)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("fft_rate")
    .v_type(V_INT)
    .def(25)
    .min(0)
    .max(1000)
    .step(1)
    .presets((c_def::v_preset[]){
        {"1000","1000 fps",1000},
        {"500", "500 fps", 500},
        {"400", "400 fps", 400},
        {"300", "300 fps", 300},
        {"200", "200 fps", 200},
        {"100", "100 fps", 100},
        {"75",  "75 fps",  75},
        {"60",  "60 fps",  60},
        {"50",  "50 fps",  50},
        {"30",  "30 fps",  30},
        {"25",  "25 fps",  25},
        {"20",  "20 fps",  20},
        {"17",  "17 fps",  17},
        {"15",  "15 fps",  15},
        {"10",  "10 fps",  10},
        {"5",   "5 fps",   5},
        {"2",   "2 fps",   2},
        {"1",   "1 fps",   1},
        {"0",   "0 fps",   0},
    })
    ,
c_def()
    .idx(C_FFT_OVERLAP_LABEL)
    .name("overlap label")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_LEFT))
    .hint("FFT overlap")
    .g_type(G_LABEL)
    .dock(D_FFT)
    .scope(S_GUI)
    .v_type(V_DOUBLE)
    .prefix("Overlap:")
    .suffix("%")
    .def(0.0)
    .min(0.0)
    .max(0.0)
    .step(0.0)
    .writable(0)
    ,
c_def()
    .idx(C_FFT_TIMESPAN)
    .name("Time span")
    .title("Time span")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,5))
    .hint("The vertical time span on the waterfall.")
    .g_type(G_COMBO)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("waterfall_span")
    .v_type(V_INT)
    .def(0)
    .min(0)
    .max(48*60*60*1000)
    .step(1)
    .presets((c_def::v_preset[]){
        {"0", "Auto",     0},
        {"1", "1 min",    1*60*1000},
        {"2", "2 min",    2*60*1000},
        {"3", "5 min",    5*60*1000},
        {"4", "10 min",   10*60*1000},
        {"5", "15 min",   15*60*1000},
        {"6", "20 min",   20*60*1000},
        {"7", "30 min",   30*60*1000},
        {"8", "1 hours",  1*60*60*1000},
        {"9", "2 hours",  2*60*60*1000},
        {"10","5 hours",  5*60*60*1000},
        {"11","10 hours", 10*60*60*1000},
        {"12","16 hours", 16*60*60*1000},
        {"13","24 hours", 24*60*60*1000},
        {"14","48 hours", 48*60*60*1000},
    })
    ,
c_def()
    .idx(C_FFT_TIMESPAN_LABEL)
    .name("span label")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_LEFT))
    .hint("The vertical time span on the waterfall.")
    .g_type(G_LABEL)
    .dock(D_FFT)
    .scope(S_GUI)
    .v_type(V_DOUBLE)
    .prefix("Res:")
    .suffix(" s")
    .def(1.0)
    .min(0.0)
    .max(0.0)
    .step(0.0)
    .frac_digits(2)
    .writable(0)
    ,
c_def()
    .idx(C_FFT_WINDOW)
    .name("Window")
    .title("Window")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,5))
    .hint("FFT window")
    .g_type(G_COMBO)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("fft_window")
    .v_type(V_INT)
    .def(1)
    .min(0)
    .max(7)
    .step(1)
    .presets((c_def::v_preset[]){
        {"0","Hamming", 0},
        {"1","Hann",    1},
        {"2","Blackman",2},
        {"3","Rectangular",3},
        {"4","Kaiser",4},
        {"5","Blackman-Harris",5},
        {"6","Bartlett",6},
        {"7","Flattop",7},
    })
    ,
c_def()
    .idx(C_FFT_WINDOW_CORR)
    .name("WindowCorr")
    .title("WindowCorr")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,SIZE_PREFERRED|ALIGN_LEFT))
    .hint("FFT window correction (scaling)")
    .g_type(G_COMBO)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("fft_window_correction")
    .v_type(V_INT)
    .def(1)
    .min(0)
    .max(2)
    .step(1)
    .presets((c_def::v_preset[]){
        {"0","None", 0},
        {"1","Avg Ampl",    1},
        {"2","Avg Pwr",2},
    })
    ,
c_def()
    .idx(C_FFT_AVG)
    .name("Averaging")
    .title("Averaging")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,5))
    .hint("FFT averaging gain")
    .g_type(G_SLIDER)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("averaging")
    .v_type(V_INT)
    .def(0)
    .min(0)
    .max(100)
    .step(1)
    ,
c_def()
    .idx(C_FFT_AVG_LABEL)
    .name("avg label")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_LEFT))
    .hint("FFT averaging gain")
    .g_type(G_LABEL)
    .dock(D_FFT)
    .scope(S_GUI)
    .v_type(V_DOUBLE)
    .prefix("~")
    .suffix("x")
    .def(1.0)
    .min(0.0)
    .max(0.0)
    .step(0.0)
    .frac_digits(1)
    .writable(0)
    ,
c_def()
    .idx(C_FFT_SPLIT)
    .name("split")
    .title("Panadapter")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,5))
    .next_title("Waterfall")
    .next_placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_LEFT))
    .hint("FFT split")
    .g_type(G_SLIDER)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("split")
    .v_type(V_INT)
    .def(35)
    .min(0)
    .max(100)
    .step(1)
    ,
c_def()
    .idx(C_FFT_PEAK_DETECT)
    .name("Detect")
    .title("Peak")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,3,SIZE_MINIMUMEXPANDING))
    .hint("Enable peak detection in FFT")
    .g_type(G_TOGGLEBUTTON)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("peak_detect")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_FFT_PEAK_HOLD)
    .name("Hold")
    .title("Peak")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,3,SIZE_MINIMUMEXPANDING))
    .hint("Toggle peak hold in FFT")
    .g_type(G_TOGGLEBUTTON)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("peak_hold")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_FFT_PAND_MIN_DB)
    .name("fft_pand_min_db")
    .title("Pand. dB")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NONE,PLACE_NONE))
    .hint("Set pandapter dB range")
    .g_type(G_RANGESLIDER)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("pandapter_min_db")
    .v_type(V_INT)
    .def(-120)
    .min(-160)
    .max(0)
    .step(1)
    ,
c_def()
    .idx(C_FFT_PAND_MAX_DB)
    .base(C_FFT_PAND_MIN_DB)
    .name("fft_pand_max_db")
    .title("Pand. dB")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,5))
    .hint("Set pandapter dB range")
    .g_type(G_RANGESLIDER)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("pandapter_max_db")
    .v_type(V_INT)
    .def(-20)
    .min(-160)
    .max(0)
    .step(1)
    ,
c_def()
    .idx(C_FFT_RANGE_LOCKED)
    .name("Lock")
    .title("Lock")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,SIZE_PREFERRED|ALIGN_LEFT))
    .hint("Lock panadapter and waterfall sliders together")
    .g_type(G_TOGGLEBUTTON)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("db_ranges_locked")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_FFT_WF_MIN_DB)
    .name("fft_wf_min_db")
    .title("Wf. dB")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NONE,PLACE_NONE))
    .hint("Set waterfall dB range")
    .g_type(G_RANGESLIDER)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("waterfall_min_db")
    .v_type(V_INT)
    .def(-120)
    .min(-160)
    .max(0)
    .step(1)
    ,
c_def()
    .idx(C_FFT_WF_MAX_DB)
    .base(C_FFT_WF_MIN_DB)
    .name("fft_wf_max_db")
    .title("Wf. dB")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,5))
    .hint("Set waterfall dB range")
    .g_type(G_RANGESLIDER)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("waterfall_max_db")
    .v_type(V_INT)
    .def(-20)
    .min(-160)
    .max(0)
    .step(1)
    ,

c_def()
    .idx(C_PLOT_ZOOM)
    .name("fft_zoom")
    .title("Freq zoom")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,5))
    .hint("Set zoom level on the frequency axis")
    .g_type(G_LOGSLIDER)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("fft_zoom")
    .v_type(V_DOUBLE)
    .def(1.0)
    .min(1.0)
    .max(1000000.0)
    .step(1.1)
    .frac_digits(1)
    ,
c_def()
    .idx(C_PLOT_ZOOM_LABEL)
    .name("zoom label")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_LEFT))
    .hint("Zoom level on the frequency axis")
    .g_type(G_LABEL)
    .dock(D_FFT)
    .scope(S_GUI)
    .v_type(V_DOUBLE)
    .suffix("x")
    .def(0.0)
    .min(0.0)
    .max(0.0)
    .step(0.0)
    .frac_digits(1)
    .writable(0)
    ,
c_def()
    .idx(C_PLOT_RESET)
    .name("Reset")
    .title("Reset")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,1,2))
    .hint("Reset zoom level to 1x")
    .g_type(G_BUTTON)
    .dock(D_FFT)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,
c_def()
    .idx(C_PLOT_CENTER)
    .name("Center")
    .title("Center")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,3))
    .hint("Center FFT around original center frequency")
    .g_type(G_BUTTON)
    .dock(D_FFT)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,
c_def()
    .idx(C_PLOT_DEMOD)
    .name("Demod")
    .title("Demod")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("Center FFT around demodulator frequency")
    .g_type(G_BUTTON)
    .dock(D_FFT)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,
c_def()
    .idx(C_PLOT_COLOR)
    .name("Color")
    .title("Color")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,3))
    .hint("Click to select color for the FFT plot")
    .g_type(G_COLORPICKER)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("pandapter_color")
    .v_type(V_INT)
    .def(0xffffffffll)
    .min(0ll)
    .max(0xffffffffll)
    .step(0ll)
    .presets((c_def::v_preset[]){
        {"white", "White", 0xffffffffll},
        {"yellow","Yellow",0xfffafa7fll},
        {"green", "Green", 0xff97d097ll},
        {"pink",  "Pink",  0xffffc8c8ll},
        {"blue",  "Blue",  0xffb7e0ffll},
        {"cyan",  "Cyan",  0xff7ffafall},
    })
    ,
c_def()
    .idx(C_PLOT_FILL)
    .name("Fill")
    .title("Fill")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,3))
    .hint("Fill the area below the FFT plot with a gradient")
    .g_type(G_TOGGLEBUTTON)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("pandapter_fill")
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_WF_COLORMAP)
    .name("Colormap")
    .title("Colormap")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,6))
    .hint("Select waterfall color map")
    .g_type(G_COMBO)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("waterfall_colormap")
    .v_type(V_STRING)
    .def("gqrx")
    .min("")
    .max("")
    .step("")
    .presets((c_def::v_preset[]){
        {"gqrx",              "Gqrx",                "gqrx"},
        {"viridis",           "Viridis",             "viridis"},
        {"turbo",             "Google Turbo",        "turbo"},
        {"plasma",            "Plasma",              "plasma"},
        {"whitehotcompressed","White Hot Compressed","whitehotcompressed"},
        {"whitehot",          "White Hot",           "whitehot"},
        {"blackhot",          "Black Hot",           "blackhot"},
    })
    ,
c_def()
    .idx(C_WF_BG_THREADS)
    .name("background threads")
    .title("Background threads")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0,1,4))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,3))
    .hint("Number of IQ Tool pause mode waterfall update threads")
    .g_type(G_COMBO)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("waterfall_threads")
    .v_type(V_INT)
    .def(0)
    .min(0)
    .max(128)
    .step(1)
    ,
c_def()
    .idx(C_ENABLE_BANDPLAN)
    .name("Enable Band Plan")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,1,7))
    .hint("Enable Band Plan on bottom of spectrum")
    .g_type(G_CHECKBOX)
    .dock(D_FFT)
    .scope(S_GUI)
    .v3_config_group("fft")
    .config_key("bandplan")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,

c_def()
    .idx(C_LNB_LO)
    .name("LNB LO")
    .title("LNB LO")
    .title_placement(c_def::grid_placement(0,0,1,1,ALIGN_LEFT))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("Local oscillator of up or down converter")
    .g_type(G_DOUBLESPINBOX)
    .dock(D_INPUTCTL)
    .scope(S_GUI)
    .v3_config_group("input")
    .config_key("lnb_lo")
    .v_type(V_INT)
    .suffix(" MHz")
    .def(0)
    .min(-500000000000)
    .max(500000000000)
    .step(1000000)
    .frac_digits(6)
    ,
c_def()
    .idx(C_IQ_AGC)
    .name("Hardware AGC")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,1,3))
    .hint("<html><head/><body><p>Toggle hardware-based automatic gain control.</p><p>This feature requires hardware that supports it. It is known to work with RTL-SDR devices.</p></body></html>")
    .g_type(G_CHECKBOX)
    .dock(D_INPUTCTL)
    .scope(S_RX)
    .v3_config_group("input")
    .config_key("hwagc")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    .event(1)
    ,
c_def()
    .idx(C_IQ_AGC_ACK)
    .name("call back event")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NONE,PLACE_NONE))
    .g_type(G_NONE)
    .dock(D_INPUTCTL)
    .scope(S_RX)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    .writable(0)
    .event(1)
    ,
c_def()
    .idx(C_IQ_SWAP)
    .name("Swap I/Q")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(3,0,1,2))
    .hint("<html><head/><body><p>Swap the the I/Q channels. This can be useful with audio-based input or when dealing with inverted IF.</p></body></html>")
    .g_type(G_CHECKBOX)
    .dock(D_INPUTCTL)
    .scope(S_RX)
    .v3_config_group("input")
    .config_key("swap_iq")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_IGNORE_LIMITS)
    .name("No limits")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1))
    .hint("<html><head/><body><p>Ignore hardware limits such as frequency range. This allows experimenting with out-of-spec settings.</p></body></html>")
    .g_type(G_CHECKBOX)
    .dock(D_INPUTCTL)
    .scope(S_GUI)
    .v3_config_group("input")
    .config_key("ignore_limits")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_IQ_DCR)
    .name("DC remove")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,1,2))
    .hint("Enable automatic DC removal")
    .g_type(G_CHECKBOX)
    .dock(D_INPUTCTL)
    .scope(S_RX)
    .v3_config_group("input")
    .config_key("dc_cancel")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_IQ_BALANCE)
    .name("IQ balance")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1))
    .hint("Enable automatic I/Q balance (requires gr-iqbal component)")
    .g_type(G_CHECKBOX)
    .dock(D_INPUTCTL)
    .scope(S_RX)
    .v3_config_group("input")
    .config_key("iq_balance")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    .event(1)
    ,
c_def()
    .idx(C_PPM)
    .name("Freq corr")
    .title("Freq. correction")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0,1,1,ALIGN_LEFT))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("Receiver frequency correction, PPM")
    .g_type(G_DOUBLESPINBOX)
    .dock(D_INPUTCTL)
    .scope(S_RX)
    .v3_config_group("input")
    .config_key("corr_freq")
    .v_type(V_DOUBLE)
    .suffix(" ppm")
    .def(0.)
    .min(-200.)
    .max(200.)
    .step(1.)
    .frac_digits(1)
    ,
c_def()
    .idx(C_ANTENNA)
    .name("Antenna")
    .title("Antenna")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0,1,1,ALIGN_LEFT))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("Select active antenna connector")
    .g_type(G_COMBO)
    .dock(D_INPUTCTL)
    .scope(S_RX)
    .v3_config_group("input")
    .config_key("antenna")
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .event(1)
    ,
c_def()
    .idx(C_INPUTCTL_LINE)
    .name("")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,1,3))
    .hint("")
    .g_type(G_LINE)
    .dock(D_INPUTCTL)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_DIGITS_RESET)
    .name("Reset frequency controller digits")
    .title("Reset frequency controller digits")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,1,3))
    .hint("<html><head/><body><p>Reset subordinate digits in main frequency control widget</p></body></html>")
    .g_type(G_CHECKBOX)
    .dock(D_INPUTCTL)
    .scope(S_GUI)
    .v3_config_group("gui")
    .config_key("fctl_reset_digits")
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_WHEEL_INVERT)
    .name("Invert scroll wheel direction")
    .title("Invert scroll wheel direction")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,1,3))
    .hint("")
    .g_type(G_CHECKBOX)
    .dock(D_INPUTCTL)
    .scope(S_GUI)
    .v3_config_group("gui")
    .config_key("invert_scrolling")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_AUTO_BOOKMARKS)
    .name("Enable automatic demodulators")
    .title("Enable automatic demodulators")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,1,3))
    .hint("Automatically create demodulators when 'automatic' bookmark comes into bandwidth")
    .g_type(G_CHECKBOX)
    .dock(D_INPUTCTL)
    .scope(S_GUI)
    .v3_config_group("gui")
    .config_key("auto_bookmarks")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_CHAN_THREADS)
    .name("FFT channelizer")
    .title("FFT channelizer")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0,1,1,ALIGN_LEFT))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("Number of FFT chaneelizer threads")
    .g_type(G_COMBO)
    .dock(D_INPUTCTL)
    .scope(S_RX)
    .v3_config_group("gui")
    .config_key("fft_channelizer")
    .v_type(V_INT)
    .def(0)
    .min(0)
    .max(8)
    .step(1)
    .presets((c_def::v_preset[]){
        {"0","Off",0},
        {"1","Singlethreaded",1},
        {"2","2 threads",2},
        {"4","4 threads",4},
        {"8","8 threads",8},
   })
    ,

#if 0
c_def()
    .idx(C_AUTOSTART)
    .name("Automatic start")
    .title("Automatic start")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Create a VFO at the bookmark automatically")
    .g_type(G_NONE)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .bookmarks_column(3)
    .bookmarks_key("Autostart")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
#endif
c_def()
    .idx(C_HW_FREQ_LABEL)
    .name("Hardware freq")
    .title("Hardware freq:")
    .title_placement(c_def::grid_placement(0,0,1,2,ALIGN_LEFT))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,3,ALIGN_RIGHT))
    .hint("The frequency of the hardware (not including LNB)")
    .g_type(G_LABEL)
    .dock(D_RXOPT)
    .scope(S_RX)
    .v_type(V_DOUBLE)
    .suffix(" MHz")
    .def(0.0)
    .min(0.0)
    .max(0.0)
    .step(0.0)
    .frac_digits(6)
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_VFO_FREQUENCY)
    .name("Frequency")
    .title("Frequency")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,3))
    .hint("Receiver frequency")
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RXOPT)
    .scope(S_GUI)
    .v3_config_group("input")
//    .config_key("frequency")
    .v_type(V_DOUBLE)
    .suffix(" kHz")
    .def(144500.)
    .min(24000.)
    .max(2200000.)
    .step(1.)
    .frac_digits(3)
    ,
c_def()
    .idx(C_FREQ_LOCK)
    .name("")
    .icon(":/icons/icons/lock.svg")
    .title("Offset lock")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Stick inactive VFO to a frequency")
    .g_type(G_TOGGLEBUTTON)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("freq_locked")
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_FREQ_LOCK_ALL)
    .base(C_FREQ_LOCK)
    .name("Lock All")
    .title("Lock All")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NONE,PLACE_NONE))
    .hint("Stick all VFOs to a frequency")
    .g_type(G_MENUACTION)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,
c_def()
    .idx(C_FREQ_UNLOCK_ALL)
    .base(C_FREQ_LOCK)
    .name("Unlock All")
    .title("Unlock All")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NONE,PLACE_NONE))
    .hint("Unstick all VFOs from a frequency")
    .g_type(G_MENUACTION)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,
c_def()
    .idx(C_MODE)
    .name("Mode")
    .title("Mode")
    .title_placement(c_def::grid_placement(4,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,3))
    .hint("Demodulator type (mode)")
    .g_type(G_COMBO)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("demod")
    .bookmarks_column(4)
    .bookmarks_key("Modulation")
    .v_type(V_INT)
    .def(Modulations::MODE_AM)
    .min(Modulations::MODE_OFF)
    .max(Modulations::MODE_COUNT-1)
    .presets(mode_map.presets)
    ,
c_def()
    .idx(C_MODE_CHANGED)
    .name("ModeCahnged")
    .title("Mode canged")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NONE,PLACE_NEXT))
    .g_type(G_NONE)
    .dock(D_RXOPT)
    .scope(S_GUI)
    .v_type(V_INT)
    .def(0)
    .min(0)
    .max(0)
    .readable(0)
    .event(1)
    ,
c_def()
    .idx(C_MODE_OPT)
    .name("...")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Demodulator options")
    .g_type(G_BUTTON)
    .dock(D_RXOPT)
    .scope(S_GUI)
    .v3_config_group("audio")
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,
c_def()
    .idx(C_FILTER_WIDTH)
    .name("Filter width")
    .title("Filter width")
    .title_placement(c_def::grid_placement(2,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,3))
    .hint("Apply mode dependent filter preset")
    .g_type(G_COMBO)
    .dock(D_RXOPT)
    .scope(S_GUI)
    .v3_config_group("receiver")
    .v_type(V_INT)
    .def(1)
    .min(0)
    .max(3)
    .presets((c_def::v_preset[]){
        {"Wide","Wide",FILTER_PRESET_WIDE,">"},
        {"Normal","Normal",FILTER_PRESET_NORMAL,"."},
        {"Narrow","Narrow",FILTER_PRESET_NARROW,"<"},
        {"User","User",FILTER_PRESET_USER},
   })
    ,
c_def()
    .idx(C_FILTER_LO)
    .name("Filter LO")
    .title("Filter LO")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NONE,PLACE_NONE))
    .g_type(G_NONE)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("filter_low_cut")
    .bookmarks_column(5)
    .bookmarks_key("Filter Low")
    .v_type(V_INT)
    .def(0)
    .min(-120000)
    .max(120000)
    ,
c_def()
    .idx(C_FILTER_HI)
    .name("Filter HI")
    .title("Filter HI")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NONE,PLACE_NONE))
    .g_type(G_NONE)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("filter_high_cut")
    .bookmarks_column(6)
    .bookmarks_key("Filter High")
    .v_type(V_INT)
    .def(0)
    .min(-120000)
    .max(120000)
    ,
c_def()
    .idx(C_FILTER_SHAPE)
    .name("Filter shape")
    .title("Filter shape")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,3))
    .hint("Select the filter shape")
    .g_type(G_COMBO)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("filter_shape")
    .bookmarks_column(7)
    .bookmarks_key("Filter Shape")
    .v_type(V_INT)
    .def(1)
    .min(0)
    .max(2)
    .presets((c_def::v_preset[]){
        {"Soft","Soft",Modulations::FILTER_SHAPE_SOFT},
        {"Normal","Normal",Modulations::FILTER_SHAPE_NORMAL},
        {"Sharp","Sharp",Modulations::FILTER_SHAPE_SHARP},
    })
    ,
c_def()
    .idx(C_AGC_PRESET)
    .name("AGC")
    .title("AGC")
    .title_placement(c_def::grid_placement(5,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,3))
    .hint("AGC presets")
    .g_type(G_COMBO)
    .dock(D_RXOPT)
    .scope(S_GUI)
    .v3_config_group("receiver")
    .v_type(V_STRING)
    .def("Medium")
    .min("")
    .max("")
    .event(1)
    .presets((c_def::v_preset[]){
        {"0","Fast","Fast"},
        {"1","Medium","Medium"},
        {"2","Slow","Slow"},
        {"3","User","User"},
        {"4","Off","Off"},
    })
    ,
c_def()
    .idx(C_AGC_OPT)
    .name("...")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("AGC Options")
    .g_type(G_BUTTON)
    .dock(D_RXOPT)
    .scope(S_GUI)
    .v3_config_group("audio")
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,
c_def()
    .idx(C_SQUELCH_LEVEL)
    .name("Squelch")
    .title("Squelch")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("Squelch level in dB below full scale")
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("sql_level")
    .suffix(" dB")
    .v_type(V_DOUBLE)
    .frac_digits(1)
    .def(-150.0)
    .min(-150.0)
    .max(0.0)
    .step(1.0)
    .event(1)
    ,
c_def()
    .idx(C_SQUELCH_AUTO)
    .name("A")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Set squelch to the current signal or noise level")
    .shortcut("~")
    .g_type(G_BUTTON)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .v_type(V_DOUBLE)
    .def(3.0)
    .min(0.0)
    .max(1.0)
    .step(1.0)
    .readable(0)
    ,
c_def()
    .idx(C_SQUELCH_RESET)
    .base(C_SQUELCH_LEVEL)
    .name("R")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Reset squelch to its default value")
    .shortcut("`")
    .g_type(G_BUTTON)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v_type(V_DOUBLE)
    .frac_digits(1)
    .def(-150.0)
    .min(-150.0)
    .max(0.0)
    .step(1.0)
    .readable(0)
    ,
c_def()
    .idx(C_SQUELCH_AUTO_GLOBAL)
    .base(C_SQUELCH_AUTO)
    .name("AUTO all")
    .title("AUTO all")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Set squelch to the current signal or noise level")
    .g_type(G_MENUACTION)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v_type(V_DOUBLE)
    .def(3.0)
    .min(0.0)
    .max(1.0)
    .step(1.0)
    .readable(0)
    ,
c_def()
    .idx(C_SQUELCH_RESET_GLOBAL)
    .base(C_SQUELCH_AUTO)
    .name("Reset all")
    .title("Reset all")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Set squelch to the current signal or noise level")
    .g_type(G_MENUACTION)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,
c_def()
    .idx(C_NB3_ON)
    .name("NB3")
    .title("Noise blanker")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Audio noise blanker")
    .g_type(G_TOGGLEBUTTON)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v3_config_group("audio")
    .config_key("nb3on")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_NB2_ON)
    .name("NB2")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Noise blanker for pulse type noise")
    .g_type(G_TOGGLEBUTTON)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v3_config_group("audio")
    .config_key("nb2on")
    .bookmarks_column(25)
    .bookmarks_key("NB2 ON")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_NB1_ON)
    .name("NB1")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Noise blanker for static type noise")
    .g_type(G_TOGGLEBUTTON)
    .dock(D_RXOPT)
    .scope(S_VFO)
    .v3_config_group("audio")
    .config_key("nb1on")
    .bookmarks_column(23)
    .bookmarks_key("NB1 ON")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_NB_OPT)
    .name("...")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .g_type(G_BUTTON)
    .dock(D_RXOPT)
    .scope(S_GUI)
    .v3_config_group("audio")
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,

c_def()
    .idx(C_AGC_MAN_GAIN_UP)
    .name("Manual gain up")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NONE,0,1,2))
    .shortcut("+")
    .g_type(G_NONE)
    .dock(D_AUDIO)
    .scope(S_VFO)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,
c_def()
    .idx(C_AGC_MAN_GAIN_DOWN)
    .name("Manual gain down")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NONE,0,1,2))
    .shortcut("-")
    .g_type(G_NONE)
    .dock(D_AUDIO)
    .scope(S_VFO)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,
c_def()
    .idx(C_AGC_MAN_GAIN)
    .name("Gain:")
    .title("Gain:")
    .title_placement(c_def::grid_placement(PLACE_SAME,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,5))
    .hint("Gain:")
    .g_type(G_SLIDER)
    .dock(D_AUDIO)
    .scope(S_VFO)
    .v3_config_group("audio")
    .config_key("gain")
    .bookmarks_column(10)
    .bookmarks_key("AGC Manual Gain")
    .v_type(V_DOUBLE)
    .frac_digits(1)
    .def(-6.0)
    .min(-100.0)
    .max(100.0)
    .step(0.1)
    .event(true)
    .presets((c_def::v_preset[]){
        {"0","0 db",0.0},
        {"-6","-6 db",-6.0},
    })
    ,
c_def()
    .idx(C_AGC_MAN_GAIN_LABEL)
    .name("Gain:")
    .title("Gain:")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_LEFT))
    .hint("Gain value")
    .g_type(G_LABEL)
    .dock(D_AUDIO)
    .scope(S_VFO)
    .v_type(V_STRING)
    .suffix(" db")
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_AGC_MUTE)
    .name("Mute")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0,1,2))
    .shortcut("M")
    .g_type(G_TOGGLEBUTTON)
    .dock(D_AUDIO)
    .scope(S_VFO)
    .v3_config_group("audio")
    .config_key("mute")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_GLOBAL_MUTE)
    .base(C_AGC_MUTE)
    .name("Mute all")
    .title("Mute all")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,0))
    .g_type(G_MENUCHECKBOX)
    .dock(D_AUDIO)
    .v3_config_group("audio")
    .config_key("globalmute")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_AUDIO_UDP_STREAMING)
    .name("UDP")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1))
    .g_type(G_TOGGLEBUTTON)
    .dock(D_AUDIO)
    .scope(S_VFO)
    .v3_config_group("audio")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    .event(1)
    ,
c_def()
    .idx(C_AUDIO_REC)
    .name("Rec")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1))
    .shortcut("R")
    .g_type(G_TOGGLEBUTTON)
    .dock(D_AUDIO)
    .scope(S_VFO)
    .v3_config_group("audio")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    .event(1)
    ,
c_def()
    .idx(C_AUDIO_PLAY)
    .name("Play")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1))
    .g_type(G_TOGGLEBUTTON)
    .dock(D_AUDIO)
    .scope(S_RX)
    .v3_config_group("audio")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    .event(1)
    ,
c_def()
    .idx(C_AUDIO_OPTIONS)
    .name("...")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .g_type(G_BUTTON)
    .dock(D_AUDIO)
    .scope(S_GUI)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,
c_def()
    .idx(C_AUDIO_REC_FILENAME)
    .name("Rec")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,1,1,5))
    .g_type(G_LABEL)
    .dock(D_AUDIO)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(0)
    .event(1)
    ,

c_def()
    .idx(C_AUDIO_FFT_SPLIT)
    .name("audio_fft_split")
    .title("Panadapter")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .next_title("Waterfall")
    .next_placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Audio FFT split")
    .tab("FFT")
    .g_type(G_SLIDER)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_GUI)
    .v3_config_group("audio")
    .config_key("fft_split")
    .v_type(V_INT)
    .def(100)
    .min(0)
    .max(100)
    .step(1)
    ,
c_def()
    .idx(C_AUDIO_FFT_PAND_MIN_DB)
    .name("audio_fft_pand_min_db")
    .title("Panadapter dB range")
    .hint("Set pandapter dB range")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NONE,PLACE_NONE))
    .tab("FFT")
    .g_type(G_RANGESLIDER)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_GUI)
    .v3_config_group("audio")
    .config_key("pandapter_min_db")
    .v_type(V_INT)
    .def(-80)
    .min(-200)
    .max(0)
    .step(1)
    ,
c_def()
    .idx(C_AUDIO_FFT_PAND_MAX_DB)
    .base(C_AUDIO_FFT_PAND_MIN_DB)
    .name("audio_fft_pand_max_db")
    .title("Panadapter dB range")
    .hint("Set pandapter dB range")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .tab("FFT")
    .g_type(G_RANGESLIDER)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_GUI)
    .v3_config_group("audio")
    .config_key("pandapter_max_db")
    .v_type(V_INT)
    .def(0)
    .min(-200)
    .max(0)
    .step(1)
    ,
c_def()
    .idx(C_AUDIO_FFT_WF_MIN_DB)
    .name("audio_fft_wf_min_db")
    .title("Waterfall dB range")
    .hint("Set waterfall dB range")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NONE,PLACE_NONE))
    .tab("FFT")
    .g_type(G_RANGESLIDER)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_GUI)
    .v3_config_group("audio")
    .config_key("waterfall_min_db")
    .v_type(V_INT)
    .def(-80)
    .min(-200)
    .max(0)
    .step(1)
    ,
c_def()
    .idx(C_AUDIO_FFT_WF_MAX_DB)
    .base(C_AUDIO_FFT_WF_MIN_DB)
    .name("audio_fft_wf_max_db")
    .title("Waterfall dB range")
    .hint("Set waterfall dB range")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .tab("FFT")
    .g_type(G_RANGESLIDER)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_GUI)
    .v3_config_group("audio")
    .config_key("waterfall_max_db")
    .v_type(V_INT)
    .def(0)
    .min(-200)
    .max(0)
    .step(1)
    ,
c_def()
    .idx(C_AUDIO_FFT_RANGE_LOCKED)
    .name("Lock")
    .title("")
    .hint("Lock panadapter and waterfall sliders together")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .tab("FFT")
    .g_type(G_TOGGLEBUTTON)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_GUI)
    .v3_config_group("audio")
    .config_key("db_ranges_locked")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_AUDIO_REC_DIR)
    .name("rec_location")
    .title("Location for recorded audio files:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0,1,3,ALIGN_LEFT))
    .placement(c_def::grid_placement(PLACE_NEXT,0,1,2))
    .tab("Recording")
    .g_type(G_TEXT)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_VFO)
    .v3_config_group("audio")
    .config_key("rec_dir")
    .bookmarks_column(27)
    .bookmarks_key("REC DIR")
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    ,
c_def()
    .idx(C_AUDIO_REC_DIR_BTN)
    .name("Select")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,SIZE_PREFERRED))
    .tab("Recording")
    .g_type(G_BUTTON)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_GUI)
    .v_type(V_INT)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,
c_def()
    .idx(C_AUDIO_REC_SQUELCH_TRIGGERED)
    .name("Squelch triggered")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("Enable squelch triggered recording")
    .tab("Recording")
    .g_type(G_CHECKBOX)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("squelch_triggered_recording")
    .bookmarks_column(28)
    .bookmarks_key("REC SQL Trig")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_AUDIO_REC_MIN_TIME)
    .name("Min time")
    .title("Min time")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("Minimum squelch triggered recording fragment time")
    .tab("Recording")
    .g_type(G_SPINBOX)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("rec_min_time")
    .bookmarks_column(29)
    .bookmarks_key("REC Min Time")
    .v_type(V_INT)
    .suffix("ms")
    .def(0)
    .min(0)
    .max(10000)
    .step(100)
    ,
c_def()
    .idx(C_AUDIO_REC_MAX_GAP)
    .name("Max gap")
    .title("Max gap")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("Maximum squelch triggered recording silence time")
    .tab("Recording")
    .g_type(G_SPINBOX)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("rec_max_gap")
    .bookmarks_column(30)
    .bookmarks_key("REC Max Gap")
    .v_type(V_INT)
    .suffix("ms")
    .def(0)
    .min(0)
    .max(10000)
    .step(100)
    ,
c_def()
    .idx(C_AUDIO_REC_COPY)
    .name("All VFOs")
    .title("Copy to")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .tab("Recording")
    .g_type(G_BUTTON)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_GUI)
    .v_type(V_INT)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    .readable(0)
    ,
c_def()
    .idx(C_AUDIO_UDP_HOST)
    .name("udp_host")
    .title("UDP host")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .tab("Network")
    .g_type(G_TEXT)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_VFO)
    .v3_config_group("audio")
    .config_key("udp_host")
    .v_type(V_STRING)
    .def("127.0.0.1")
    .min("")
    .max("")
    .step("")
    ,
c_def()
    .idx(C_AUDIO_UDP_PORT)
    .name("udp_port")
    .title("UDP port")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .tab("Network")
    .g_type(G_SPINBOX)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_VFO)
    .v3_config_group("audio")
    .config_key("udp_port")
    .v_type(V_INT)
    .def(7355)
    .min(1)
    .max(65535)
    .step(1)
    ,
c_def()
    .idx(C_AUDIO_UDP_STEREO)
    .name("UDP stereo")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,1))
    .tab("Network")
    .g_type(G_CHECKBOX)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_VFO)
    .v3_config_group("audio")
    .config_key("udp_stereo")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_AUDIO_DEDICATED_DEV)
    .name("dev")
    .title("Device")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,SIZE_PREFERRED))
    .tab("Audio")
    .g_type(G_COMBO)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_VFO)
    .v3_config_group("audio")
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    ,
c_def()
    .idx(C_AUDIO_DEDICATED_ON)
    .name("enable dedicated")
    .title("")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,1))
    .tab("Audio")
    .g_type(G_CHECKBOX)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_VFO)
    .v3_config_group("audio")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    .event(1)
    ,
c_def()
    .idx(C_AUDIO_DEDICATED_ERROR)
    .name("Error")
    .title("Error")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,0))
    .hint("Error mesage")
    .tab("Audio")
    .g_type(G_LABEL)
    .dock(D_AUDIO)
    .window(W_CHILD)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(false)
    .event(true)
    ,

c_def()
    .idx(C_AGC_MAX_GAIN)
    .name("Max Gain")
    .title("Max Gain")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Max Gain")
    .g_type(G_SLIDER)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("agc_maxgain")
    .bookmarks_column(11)
    .bookmarks_key("AGC Max Gain")
    .v_type(V_INT)
    .def(100)
    .min(0)
    .max(150)
    .step(1)
    ,
c_def()
    .idx(C_AGC_MAX_GAIN_LABEL)
    .name("Max gain")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_RIGHT))
    .hint("Max gain")
    .suffix(" db")
    .g_type(G_LABEL)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_AGC_TARGET)
    .name("Target")
    .title("Target")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Target")
    .g_type(G_SLIDER)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("agc_target_level")
    .bookmarks_column(9)
    .bookmarks_key("AGC Target Level")
    .v_type(V_INT)
    .def(0)
    .min(-100)
    .max(0)
    .step(1)
    ,
c_def()
    .idx(C_AGC_TARGET_LABEL)
    .name("Target level")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_RIGHT))
    .hint("Target level")
    .suffix(" db")
    .g_type(G_LABEL)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_AGC_ATTACK)
    .name("Attack")
    .title("Attack")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Attack")
    .g_type(G_SLIDER)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("agc_attack")
    .bookmarks_column(12)
    .bookmarks_key("AGC Attack")
    .v_type(V_INT)
    .def(20)
    .min(20)
    .max(1000)
    .step(10)
    ,
c_def()
    .idx(C_AGC_ATTACK_LABEL)
    .name("Attack value")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_RIGHT))
    .hint("Attack value")
    .suffix(" ms")
    .g_type(G_LABEL)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_AGC_DECAY)
    .name("Decay")
    .title("Decay")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Decay")
    .g_type(G_SLIDER)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("agc_decay")
    .bookmarks_column(13)
    .bookmarks_key("AGC Decay")
    .v_type(V_INT)
    .def(500)
    .min(50)
    .max(5000)
    .step(10)
    ,
c_def()
    .idx(C_AGC_DECAY_LABEL)
    .name("Decay value")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_RIGHT))
    .hint("Decay value")
    .suffix(" ms")
    .g_type(G_LABEL)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_AGC_HANG)
    .name("Hang")
    .title("Hang")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Hang")
    .g_type(G_SLIDER)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("agc_hang")
    .bookmarks_column(14)
    .bookmarks_key("AGC Hang")
    .v_type(V_INT)
    .def(0)
    .min(0)
    .max(5000)
    .step(10)
    ,
c_def()
    .idx(C_AGC_HANG_LABEL)
    .name("Hang value")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_RIGHT))
    .hint("Hang value")
    .g_type(G_LABEL)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v_type(V_STRING)
    .suffix(" ms")
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_AGC_PANNING)
    .name("Panning")
    .title("Panning")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Panning")
    .g_type(G_SLIDER)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("agc_panning")
    .bookmarks_column(15)
    .bookmarks_key("Panning")
    .v_type(V_INT)
    .def(0)
    .min(-100)
    .max(100)
    .step(1)
    .event(true)
    .presets((c_def::v_preset[]){
        {"Center","Center",0}
    })
    ,
c_def()
    .idx(C_AGC_PANNING_LABEL)
    .name("Panning value")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,1,ALIGN_RIGHT))
    .hint("Panning value")
    .g_type(G_LABEL)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_AGC_PANNING_AUTO)
    .name("Auto panning")
    .title("Auto panning")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,1))
    .hint("Auto panning")
    .g_type(G_CHECKBOX)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("agc_panning_auto")
    .bookmarks_column(16)
    .bookmarks_key("Auto Panning")
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_AGC_ON)
    .name("AGC On")
    .title("AGC On")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("AGC On")
    .g_type(G_NONE)
    .dock(D_RXOPT)
    .window(W_AGC_OPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("agc_on")
    .bookmarks_column(8)
    .bookmarks_key("AGC On")
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    ,

c_def()
    .idx(C_NB1_THR)
    .name("NB1 threshold")
    .title("NB1 threshold")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("NB1 threshold")
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RXOPT)
    .window(W_NB_OPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("nb1thr")
    .bookmarks_column(24)
    .bookmarks_key("NB1 Threshold")
    .v_type(V_DOUBLE)
    .frac_digits(1)
    .def(2.0)
    .min(1.0)
    .max(20.0)
    .step(0.1)
    ,
c_def()
    .idx(C_NB2_THR)
    .name("NB2 threshold")
    .title("NB2 threshold")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("NB2 threshold")
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RXOPT)
    .window(W_NB_OPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("nb2thr")
    .bookmarks_column(26)
    .bookmarks_key("NB2 Threshold")
    .v_type(V_DOUBLE)
    .frac_digits(1)
    .def(2.0)
    .min(0.0)
    .max(15.0)
    .step(0.1)
    ,
c_def()
    .idx(C_NB3_GAIN)
    .name("NB3 gain")
    .title("NB3 gain")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("NB3 gain")
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RXOPT)
    .window(W_NB_OPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("nb3gain")
    .bookmarks_column(-1)
    .v_type(V_DOUBLE)
    .frac_digits(1)
    .def(5.0)
    .min(0.0)
    .max(10.0)
    .step(0.1)
    ,

c_def()
    .idx(C_NFM_MAXDEV)
    .name("Max dev")
    .title("Max dev")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("NFM Max dev")
    .g_type(G_COMBO)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_NFM)
    .v3_config_group("receiver")
    .config_key("fm_maxdev")
    .bookmarks_column(18)
    .bookmarks_key("FM Max Deviation")
    .v_type(V_DOUBLE)
    .frac_digits(0)
    .def(2500.0)
    .min(10.0)
    .max(75000.0)
    .step(10.0)
    .presets((c_def::v_preset[])
    {
        {"0","Voice (2.5 kHz)",2500.0},
        {"1","Voice (5 kHz)",5000.0},
        {"2","APT (17 kHz)",17000.0},
        {"3","APT (25 kHz)",25000.0},
    })
    ,
c_def()
    .idx(C_NFMPLL_MAXDEV)
    .name("Max dev")
    .title("Max dev")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("NFM Max dev")
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_NFMPLL)
    .v3_config_group("receiver")
    .bookmarks_column(-1)
    .v_type(V_DOUBLE)
    .frac_digits(0)
    .def(2500.0)
    .min(10.0)
    .max(75000.0)
    .step(10.0)
    .presets((c_def::v_preset[])
    {
        {"0","Voice (2.5 kHz)",2500.0},
        {"1","Voice (5 kHz)",5000.0},
        {"2","APT (17 kHz)",17000.0},
        {"3","APT (25 kHz)",25000.0},
    })
    ,
c_def()
    .idx(C_NFM_DEEMPH)
    .name("Deemphasis")
    .title("Deemphasis")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("NFM Deemphasis")
    .g_type(G_COMBO)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_NFM)
    .v3_config_group("receiver")
    .config_key("fm_deemph")
    .bookmarks_column(19)
    .bookmarks_key("FM Deemphasis")
    .v_type(V_DOUBLE)
    .def(75.0)
    .min(0.0)
    .max(1000.0)
    .step(1.0)
    .presets((c_def::v_preset[])
    {
        {"0","Off",0.0},
        {"1","25 us",25.0},
        {"2","50 us",50.0},
        {"3","75 us",75.0},
        {"4","100 us",100.0},
        {"5","250 us",250.0},
        {"6","530 us",530.0},
        {"7","1 ms",1000.0},
    })
    ,
c_def()
    .idx(C_NFM_SUBTONE_FILTER)
    .name("Subtone filter")
    .title("Subtone filter")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,1))
    .hint("NFM Subtone filter")
    .g_type(G_CHECKBOX)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_NFM)
    .v3_config_group("receiver")
    .bookmarks_column(-1)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_NFMPLL_DAMPING_FACTOR)
    .name("Damping factor")
    .title("Damping factor")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("NFM PLL Damping factor")
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_NFMPLL)
    .v3_config_group("receiver")
    .config_key("fmpll_damping_factor")
    .bookmarks_column(-1)
    .v_type(V_DOUBLE)
    .frac_digits(2)
    .def(0.7)
    .min(0.01)
    .max(1.0)
    .step(0.01)
    ,
c_def()
    .idx(C_NFMPLL_PLLBW)
    .name("PLL")
    .title("PLL")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("NFM PLL bandwidth")
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_NFMPLL)
    .v3_config_group("receiver")
    .config_key("nfmpll_bw")
    .bookmarks_column(31)
    .bookmarks_key("NFM PLL BW")
    .v_type(V_DOUBLE)
    .frac_digits(4)
    .def(0.027)
    .min(0.0001)
    .max(0.5)
    .step(0.001)
    ,
c_def()
    .idx(C_NFMPLL_SUBTONE_FILTER)
    .name("Subtone filter")
    .title("Subtone filter")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,1))
    .hint("NFM PLL Subtone filter")
    .g_type(G_CHECKBOX)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_NFMPLL)
    .v3_config_group("receiver")
    .config_key("subtone_filter")
    .bookmarks_column(-1)
    .v_type(V_BOOLEAN)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_AMSYNC_PLLBW)
    .name("PLL")
    .title("PLL")
    .title_placement(c_def::grid_placement(0,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("AM SYNC PLL bandwidth")
    .g_type(G_COMBO)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_AM_SYNC)
    .v3_config_group("receiver")
    .config_key("pll_bw")
    .bookmarks_column(22)
    .bookmarks_key("PLL BW")
    .v_type(V_DOUBLE)
    .frac_digits(4)
    .def(0.001)
    .min(0.0001)
    .max(0.01)
    .step(0.0001)
    .presets((c_def::v_preset[])
    {
        {"Fast","Fast",0.01},
        {"Medium","Medium",0.001},
        {"Slow","Slow",0.0001},
    })
    ,
c_def()
    .idx(C_AMSYNC_DCR)
    .name("DCR")
    .title("DCR")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,1))
    .hint("AM SYNC DC remove filter")
    .g_type(G_CHECKBOX)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_AM_SYNC)
    .v3_config_group("receiver")
    .config_key("amsync_dcr")
    .bookmarks_column(21)
    .bookmarks_key("AM SYNC DCR")
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_AM_DCR)
    .name("DCR")
    .title("DCR")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_NEXT,1))
    .hint("AM DC remove filter")
    .g_type(G_CHECKBOX)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_AM)
    .v3_config_group("receiver")
    .config_key("am_dcr")
    .bookmarks_column(20)
    .bookmarks_key("AM DCR")
    .v_type(V_BOOLEAN)
    .def(1)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_CW_OFFSET)
    .name("CW offset")
    .title("CW offset")
    .title_placement(c_def::grid_placement(0,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("CW offset, Hz")
    .g_type(G_SPINBOX)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_CW)
    .v3_config_group("receiver")
    .config_key("cwoffset")
    .bookmarks_column(17)
    .bookmarks_key("CW Offset")
    .v_type(V_INT)
    .def(700)
    .min(0)
    .max(2000)
    .step(1)
    ,
c_def()
    .idx(C_DEMOD_OFF_DUMMY)
    .name("No options for this demod")
    .title("No options for this demod")
    .title_placement(c_def::grid_placement(PLACE_SAME,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("No options for this demod")
    .g_type(G_LABEL)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .v_type(V_STRING)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_OFF)
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(false)
    ,
c_def()
    .idx(C_RAWIQ_DUMMY)
    .name("No options for this demod")
    .title("No options for this demod")
    .title_placement(c_def::grid_placement(PLACE_SAME,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("No options for this demod")
    .g_type(G_LABEL)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .v_type(V_STRING)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_RAW)
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(false)
    ,
c_def()
    .idx(C_SSB_DUMMY)
    .name("No options for this demod")
    .title("No options for this demod")
    .title_placement(c_def::grid_placement(PLACE_SAME,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("No options for this demod")
    .g_type(G_LABEL)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .v_type(V_STRING)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_SSB)
    .def("")
    .min("")
    .max("")
    .step("")
    .writable(false)
    ,
c_def()
    .idx(C_WFM_DEEMPH)
    .name("Deemphasis")
    .title("Deemphasis")
    .title_placement(c_def::grid_placement(PLACE_SAME,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("WFM Deemphasis")
    .g_type(G_COMBO)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_WFM_MONO)
    .v3_config_group("receiver")
    .config_key("wfm_deemph")
    .v_type(V_DOUBLE)
    .def(50.0)
    .min(0.0)
    .max(1000.0)
    .step(1.0)
    .presets((c_def::v_preset[])
    {
        {"0","Off",0.0},
        {"1","25 us",25.0},
        {"2","50 us",50.0},
        {"3","75 us",75.0},
        {"4","100 us",100.0},
        {"5","250 us",250.0},
        {"6","530 us",530.0},
        {"7","1 ms",1000.0},
    })
    ,
c_def()
    .idx(C_WFM_RAW)
    .name("RAW output")
    .title("RAW output")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("Bypass lowpass filter")
    .g_type(G_CHECKBOX)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("wfm_raw")
    .v_type(V_BOOLEAN)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_WFM_MONO)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_WFM_STEREO_DEEMPH)
    .name("Deemphasis")
    .title("Deemphasis")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("WFM Deemphasis")
    .g_type(G_COMBO)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_WFM_STEREO)
    .v3_config_group("receiver")
    .config_key("wfm_deemph")
    .v_type(V_DOUBLE)
    .def(50.0)
    .min(0.0)
    .max(1000.0)
    .step(1.0)
    .presets((c_def::v_preset[])
    {
        {"0","Off",0.0},
        {"1","25 us",25.0},
        {"2","50 us",50.0},
        {"3","75 us",75.0},
        {"4","100 us",100.0},
        {"5","250 us",250.0},
        {"6","530 us",530.0},
        {"7","1 ms",1000.0},
    })
    ,
c_def()
    .idx(C_WFM_OIRT_DEEMPH)
    .name("Deemphasis")
    .title("Deemphasis")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("WFM Deemphasis")
    .g_type(G_COMBO)
    .dock(D_RXOPT)
    .window(W_DEMOD_OPT)
    .scope(S_VFO)
    .demod_specific(true)
    .demodgroup(Modulations::GRP_WFM_STEREO_OIRT)
    .v3_config_group("receiver")
    .config_key("wfm_deemph")
    .v_type(V_DOUBLE)
    .def(50.0)
    .min(0.0)
    .max(1000.0)
    .step(1.0)
    .presets((c_def::v_preset[])
    {
        {"0","Off",0.0},
        {"1","25 us",25.0},
        {"2","50 us",50.0},
        {"3","75 us",75.0},
        {"4","100 us",100.0},
        {"5","250 us",250.0},
        {"6","530 us",530.0},
        {"7","1 ms",1000.0},
    })
    ,

c_def()
    .idx(C_RDS_ON)
    .name("Enable RDS")
    .title("Enable RDS")
    .title_placement(c_def::grid_placement(PLACE_NONE,PLACE_NONE))
    .placement(c_def::grid_placement(PLACE_NEXT,0,1,3))
    .hint("Enable RDS decoder")
    .g_type(G_CHECKBOX)
    .dock(D_RDS)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("rds")
    .v_type(V_INT)
    .def(0)
    .min(0)
    .max(1)
    .step(1)
    ,
c_def()
    .idx(C_RDS_PS)
    .name("Station name")
    .title("Station Name:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("RDS Station name")
    .g_type(G_LABEL)
    .dock(D_RDS)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .readable(true)
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_RDS_PTY)
    .name("Program type")
    .title("Program Type:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("RDS Program type")
    .g_type(G_LABEL)
    .dock(D_RDS)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .readable(true)
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_RDS_PI)
    .name("Program ID")
    .title("Program ID:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("RDS Program ID")
    .g_type(G_LABEL)
    .dock(D_RDS)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .readable(true)
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_RDS_RADIOTEXT)
    .name("Radio text")
    .title("Radio Text:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("RDS Radio text")
    .g_type(G_LABEL)
    .dock(D_RDS)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .readable(true)
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_RDS_CLOCKTIME)
    .name("Clock time")
    .title("Clock Time:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("RDS Clock time")
    .g_type(G_LABEL)
    .dock(D_RDS)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .readable(true)
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_RDS_ALTFREQ)
    .name("Alt Frequencies")
    .title("Alt. Frequencies:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("RDS Alternative frequencies list")
    .g_type(G_LABEL)
    .dock(D_RDS)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .readable(true)
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_RDS_FLAGS)
    .name("Flags")
    .title("Flags:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("RDS Flags")
    .g_type(G_LABEL)
    .dock(D_RDS)
    .scope(S_VFO)
    .v_type(V_STRING)
    .def("")
    .min("")
    .max("")
    .step("")
    .readable(true)
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_RDS_BIT_ERRORS)
    .name("Bit errors")
    .title("Errors:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("Number of possibly correcter bit errors in the latest processed group")
    .g_type(G_LABEL)
    .dock(D_RDS)
    .scope(S_VFO)
    .v_type(V_INT)
    .def(0)
    .min(0)
    .max(0)
    .step(0)
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_RDS_CR_OMEGA)
    .name("OMEGA")
    .title("OMEGA:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("M&M CR relative rate estimation snapshot")
    .g_type(G_LABEL)
    .dock(D_RDS)
    .scope(S_VFO)
    .v_type(V_DOUBLE)
    .def(0.0)
    .min(0.0)
    .max(0.0)
    .step(0.0)
    .frac_digits(4)
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_RDS_GOMEGA)
    .name("GOMEGA")
    .title("gain omega:")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("M&M CR relative rate gain in exponential units")
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RDS)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("rds_gomega")
    .v_type(V_DOUBLE)
    .def(0.)
    .min(-50.)
    .max(1.)
    .step(0.1)
    .frac_digits(1)
    ,
c_def()
    .idx(C_RDS_CR_MU)
    .name("MU")
    .title("MU:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("M&M CR phase estimation snapshot")
    .g_type(G_LABEL)
    .dock(D_RDS)
    .scope(S_VFO)
    .v_type(V_DOUBLE)
    .def(0.0)
    .min(0.0)
    .max(0.0)
    .step(0.0)
    .frac_digits(4)
    .writable(false)
    .event(true)
    ,
c_def()
    .idx(C_RDS_GMU)
    .name("GMU")
    .title("gain mu:")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .hint("M&M CR phase gain in exponential units")
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RDS)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("rds_gmu")
    .v_type(V_DOUBLE)
    .def(0.)
    .min(-50.)
    .max(1.)
    .step(0.1)
    .frac_digits(1)
    ,
c_def()
    .idx(C_RDS_AGC)
    .name("AGC")
    .title("AGC:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("AGC rate")
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RDS)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("rds_agc")
    .v_type(V_DOUBLE)
    .def(0.002)
    .min(0.0)
    .max(1.0)
    .step(1e-4)
    .frac_digits(4)
    ,
c_def()
    .idx(C_RDS_FXFF_BW)
    .name("FXFF BW")
    .title("Fxff bw/tw, Hz:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RDS)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("rds_fxff_bw")
    .v_type(V_DOUBLE)
    .def(1000.)
    .min(500.)
    .max(1170.)
    .step(10.0)
    .frac_digits(1)
    ,
c_def()
    .idx(C_RDS_FXFF_TW)
    .name("FXFF TW")
    .title("Fxff tw:")
    .title_placement(c_def::grid_placement(PLACE_NONE,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT))
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RDS)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("rds_fxff_tw")
    .v_type(V_DOUBLE)
    .def(500.)
    .min(50.)
    .max(800.)
    .step(10.0)
    .frac_digits(1)
    ,
c_def()
    .idx(C_RDS_ECC_MAX)
    .name("ECC_MAX")
    .title("Max ECC:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .hint("Maximum number of error per block to try to correct")
    .g_type(G_SPINBOX)
    .dock(D_RDS)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("rds_ecc_max")
    .v_type(V_INT)
    .def(0)
    .min(0)
    .max(5)
    .step(1)
    ,
c_def()
    .idx(C_RDS_OMEGA_LIM)
    .name("OMEGA_LIM")
    .title("Omega lim:")
    .title_placement(c_def::grid_placement(PLACE_NEXT,0))
    .placement(c_def::grid_placement(PLACE_SAME,PLACE_NEXT,1,2))
    .g_type(G_DOUBLESPINBOX)
    .dock(D_RDS)
    .scope(S_VFO)
    .v3_config_group("receiver")
    .config_key("rds_omega_lim")
    .v_type(V_DOUBLE)
    .def(2.5e-4)
    .min(1e-5)
    .max(1e-3)
    .step(1e-5)
    .frac_digits(5)
    ,
};

std::array<std::function<void (const int, const c_def::v_union &)>, C_COUNT> conf_base::observers{};

c_def::preset_list::iterator c_def::preset_list::find(const std::string & what) const
{
    for(std::size_t k=0;k<n_items;k++)
        if(what == items[k].key)
            return &items[k];
    return end();
};

c_def::preset_list::iterator c_def::preset_list::find(const v_union & what) const
{
    for(std::size_t k=0;k<n_items;k++)
        if(what == items[k].value)
            return &items[k];
    return end();
};

bool c_def::clip(c_def::v_union & v) const
{
    if(v_type()==V_STRING)
        return false;
    if(v>d_max)
    {
        v=d_max;
        return true;
    }
    if(v<d_min)
    {
        v=d_min;
        return true;
    }
    return false;
}

const std::array<c_def,C_COUNT> & c_def::all()
{
    return store;
}

bool conf_base::register_observer(c_id optid, std::function<void (const int, const c_def::v_union &)> pevent)
{
    observers[optid]=pevent;
    return true;
}

const std::function<void (const int, const c_def::v_union &)> & conf_base::observer(c_id id) const
{
    return observers[id];
}

void conf_base::changed_value(c_id id, const int rx, const c_def::v_union & value) const
{
    auto & handler = observer(id);
    if(handler)
        handler(rx, value);
}
